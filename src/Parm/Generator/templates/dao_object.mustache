<?php

/* This file is generated by the open source Parm Generator. github.com/cassell/Parm */
{{#namespaceClassSyntax}}

{{namespaceClassSyntax}}
{{/namespaceClassSyntax}}

class {{className}}DaoObject extends \Parm\DataAccessObject
{
	{{#columns}}
	const {{AllCaps}}_COLUMN = '{{Field}}';
	{{/columns}}
	
	/**
	 * Get the "logical" table name associated. The configuration can point to a different database name.
	 * @return string
     */
	static function getDatabaseName()
	{
		return '{{databaseName}}';
	}

	/**
	 * Get the table name associated with this object
	 * @return string
     */
	public static function getTableName()
	{
		return '{{tableName}}';
	}

	/**
	 * Get the column name of the primary key field
	 * @return string The primary key column name
     */
	public static function getIdField()
	{
		return self::{{idFieldNameAllCaps}}_COLUMN;
	}

	/**
	 * Get the factory associated with this object
	 * @return {{className}}DaoFactory A DAO Factory
     */
	static function getFactory(\Parm\DatabaseNode $databaseNode = null)
	{
		return new {{className}}DaoFactory($databaseNode);
	}
	
	/**
	 * Get the list of columns in {{tableName}} from logical database "{{databaseName}}"
	 * @return Array Array of field names
     */
	public static function getFields()
	{
		return array({{fieldList}});
	}
	
{{#columns}}
{{#typeDatetime}}
	/**
     * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|DateTime|int|timestamp $val
     */
	final function set{{FieldCase}}($val) { $this->setDatetimeFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @param string $format optional Defaults to MySQL formatted Datetime YYYY-MM-DD HH:MM:SS
	 * @return string
     */
	final function get{{FieldCase}}($format = null) { return $this->getDatetimeFieldValue(self::{{AllCaps}}_COLUMN,$format); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}" as a DateTime object
	 * @return DateTime
     */
	final function get{{FieldCase}}DateTimeObject() { return $this->getDatetimeObjectFromField(self::{{AllCaps}}_COLUMN,$this->getFactory()->databaseNode->getDatetimeStorageFormat()); }
	
{{/typeDatetime}}
{{#typeDate}}
	/**
	 * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|DateTime|int|timestamp|null $val
	 * @return string|null MySQL formatted Datetime YYYY-MM-DD
     */
	final function set{{FieldCase}}($val) { $this->setDateFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @param string|null $format optional Defaults to MySQL formatted Date YYYY-MM-DD
	 * @return string|null
     */
	final function get{{FieldCase}}($format = null) { return $this->getDateFieldValue(self::{{AllCaps}}_COLUMN,$format); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}" as a DateTime object
	 * @return DateTime|null
     */
	final function get{{FieldCase}}DateTimeObject() { return $this->getDatetimeObjectFromField(self::{{AllCaps}}_COLUMN,$this->getFactory()->databaseNode->getDateStorageFormat()); }
	
{{/typeDate}}
{{#typeInt}}
	/**
     * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|int|null $val
     */
	final function set{{FieldCase}}($val) { $this->setIntFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @return int|null
     */
	final function get{{FieldCase}}(){ return $this->getIntFieldValue(self::{{AllCaps}}_COLUMN); }
	
{{/typeInt}}
{{#typeBoolean}}
	/**
     * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|int|bool|null $val
     */
	final function set{{FieldCase}}($val) { $this->setBooleanFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
	 * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @return bool|null
     */
	final function get{{FieldCase}}(){ return $this->getBooleanFieldValue(self::{{AllCaps}}_COLUMN); }
	
{{/typeBoolean}}
{{#typeNumeric}}
	/**
     * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|int|null $val
     */
	final function set{{FieldCase}}($val) { $this->setNumericalFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
     * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @return float|null
     */
	final function get{{FieldCase}}(){ return $this->getNumericalFieldValue(self::{{AllCaps}}_COLUMN); }
	
{{/typeNumeric}}
{{#typeString}}
	/**
     * Set {{Type}} field {{tableName}}.{{Field}} in logical database "{{databaseName}}"
	 * @param string|null $val
     */
	final function set{{FieldCase}}($val) { $this->setFieldValue(self::{{AllCaps}}_COLUMN,$val); }
	
	/**
     * Get {{Type}} field {{tableName}}.{{Field}} from logical database "{{databaseName}}"
	 * @return string|null
     */
	final function get{{FieldCase}}(){ return $this->getFieldValue(self::{{AllCaps}}_COLUMN); }
	
{{/typeString}}
{{/columns}}
	final function getDefaultRow()
	{
		return array({{{defaultValuePack}}});
	}

}

?>